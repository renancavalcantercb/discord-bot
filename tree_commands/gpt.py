from datetime import datetime, timezone
from os import getenv

import openai
from discord import Embed
from dotenv import load_dotenv

load_dotenv()


class Gpt:
    def __init__(self, bot):
        self.bot = bot
        self.question = None
        self.api_key = getenv('OPENAI_API_KEY')
        self.MAX_TITLE_LENGTH = 256
        self.MAX_EMBED_TITLE_LENGTH = 50

    async def gpt(self, ctx, question):
        await ctx.response.defer()
        try:
            openai.api_key = self.api_key
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a chatbot"},
                    {"role": "user", "content": question},
                ],
                temperature=0.5,
                max_tokens=1024,
            )
            result = ''
            for choice in response.choices:
                result += choice.message.content

            # check if question is too long
            if len(question) > self.MAX_TITLE_LENGTH:
                question = question[:self.MAX_TITLE_LENGTH] + '...'

            answer_embed = Embed(title=question.capitalize(), description=result, color=0x00ff00)
            answer_embed.set_footer(
                text=f'Generated by GPT-3.5 at {datetime.now(timezone.utc).astimezone().strftime("%H:%M:%S" + " on " + "%d/%m/%Y")}')
            await ctx.followup.send(embed=answer_embed)
        except Exception as e:
            await ctx.followup.send(f'An error occurred: {e}')
